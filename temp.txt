/* Control Accordion */
.CompAccordion {
  overflow: hidden;
  border-radius: 3px;
  border: 1px solid #afafaf;
  margin-bottom: 10px;
  box-shadow: rgba(0, 0, 0, 0.253) 0 1px 3px 0;
  input {
    position: absolute;
    opacity: 0;
    z-index: -1;

    &:checked {
        + .accordion-label {
          background: #fff;
          &::after {
            transform: rotate(90deg);
          }
        }
        ~ .accordion-content {
          max-height: 100px;
          opacity: 1;
          overflow-y: scroll;
          padding: 1em;
        }
      }
  }
  .row {
    display:flex;
    .col {
      flex:1;
      &:last-child {
        margin-left: 1em;
      }
    }
  }
  .accordion {
    width: 100%;
    overflow: hidden;
    &-label {
      display: flex;
      justify-content: space-between;
      padding: 14px;
      // background: $temp-gray;
      font-weight: bold;
      border-bottom: 1px solid #E5E5E5;
      color: #000;
      cursor: pointer;

      &:hover {
        background: darken($temp-gray, 0.1%);
      }
      &::after {
        content: "\276F";
        width: 14px;
        height: 14px;
        text-align: center;
        transition: all .2s;
      }
    }
    &-content {
      max-height: 0;
      padding: 0 14px;
      opacity: 0;
      transition: all .2s;
    }

  }
}


// Accordion.tsx
import classnames from 'classnames';
import React, { useState } from "react";
type TProps = {
  /** 아코디언 멀티오픈 여부 */
  isMultiOpen?: boolean;
  /** 활성화 메뉴 번호(여러 개 활성화는 콤마로 구분 "0,1,2" or "all") */
  activeIndex?: number[];
  name:string,
  contents: {
    title:any,
    content:any,
    contentCSS?:string,
  }[],

};

const Accordion = ({
  isMultiOpen = false,
  activeIndex = [0],
  name,
  contents,
}: TProps) => {
  const [activeNo, setActiveNo] = useState<number[]>(activeIndex);
  const Children = contents.map((inputJSON:any, i:number)=>{
    const makeID=`${name}-${i}`;
    return <div className="CompAccordion" key={`name${i}`}>
      <div className="accordion">
        <input
          type={"checkbox"}
          id={makeID}
          name={isMultiOpen?makeID:name}
          checked={activeNo.includes(i)}
          onChange={()=>{
            let arr = [i];
            setActiveNo(arr);
        }}></input>
        <AccordionSummary
          id={makeID}
          title={inputJSON.title}
        />
        <AccordionContents
          content={inputJSON.content}
          contentCSS={inputJSON.contentCSS}
        />
      </div>
    </div>
  });
  return <div>
      {Children}
    </div>;
};

export const AccordionSummary = ({
  id,
  title,
}: {
  id:string,
  title:any
}) => {
  return (
    <>
      <label className="accordion-label" htmlFor={id}>
        {title}
      </label>
    </>
  );
};

export const AccordionContents = ({
  content,
  contentCSS,
  }: {
    content:any,
    contentCSS?:string,
    }) => {
  return (
    <>
      <div className={classnames(["accordion-content", contentCSS?contentCSS:''])}>
        {content}
      </div>
    </>
  );
};

export default Accordion;


// stories.tsx
<Accordion
        name="accordion-check"
        isMultiOpen={true}
        contents={[
        {
          title: <span>메뉴1 타이틀</span>,
          content: <LoginView />,
          contentCSS:css`
            max-height: 200px;
          `
        },
        {
          title: <span>메뉴2 타이틀</span>,
          content: <span>
            3. 해지(정산)환급금이란 보험계약이 중도에 해지될 경우에 지급되는 금액을 말하는<br></br> 것으로 보험은 은행의 저축과 달리 위험보장과 저축을 겸비한 제도로 계약자가 <br></br>보험료 중 일부는 불의의 사고를 당한 다른 가입자에게 지급되는 보험금으로, 또 다른 일부는 보험회사 운영에 필요한 경비로 사용되므로 중도해지 시 지급되는 해지(정산)환급금은 납입한 보험료보다 적거나 없을 수도 있습니다.
                4. 보험계약자는 보험증권을 받은 날로 부터 15일 이내(다만, 계약이 성립한 날로부터 30일을<br></br> 한도로 합니다.)에 청약을 철회할 수 있으며 이 경우, 3일 이내에 보험료를 돌려 드립니다.
          </span>
        }
      ]} />

