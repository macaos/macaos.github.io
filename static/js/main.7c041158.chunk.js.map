{"version":3,"sources":["core/EventEmitter.ts","core/store.ts","components/PrintTable.tsx","fb/fbase.ts","env.ts","core/Days.ts","core/data.ts","components/AlertBuyProduct2.tsx","pages/CourseMain.tsx","components/ZZAudioProgram.ts","pages/CoursePrint.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Event","events","event","data","this","forEach","callback","push","splice","indexOf","ON_AUTH_STATE_CHANGED","FB_START_LOGIN","IS_APP_READY","INSERT_PAGE","REPLACE_PAGE","GOTO_BACK","RESET_PAGE","SHOW_ALERT","HIDE_ALERT","INIT_AUDIO","AUDIO_PLAY_PAUSE","AUDIO_STOP","SENTENSE_PLAYING","SENTENSE_PAUSE","CONTROL_UI_UPDATE","SET_BTN_PLAY_STATE","CHANGE_BTN_PLAY_STATE","SHOW_NOTI_MESSAGE","PURCHASE_COMPLETE","FREETIME_UPDATED","CLICK_HOTCLIP_THUMB","SHOW_LOADING","HIDE_LOADING","AUDIO_PLAY_COUNT","CHANGE_TPID","SHOW_TOAST_MESSAGE","atom","key","default","require","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","userInfo","initUserInfoMerge","userMoreInfo","email","uid","repeatMode","subscriptionInfo","showClips","keepClips","keepSentense","doneSentense","historyClips","authService","onAuthStateChanged","user","console","log","docName","makeDocNameWithUserInfo","dbService","collection","doc","get","then","docs","extend","syncMoreInfo","EventEmitter","dispatch","catch","err","r","isLogin","set","merge","id","split","reg","test","replace","substr","emailPw","auth","sendPasswordResetEmail","alert","error","convertErrorMessage","convertMessage","code","message","firestore","storage","dayjs","utc","mainJSON","queryDivideStr","scrollingLazyTime","scrollingTick","productTable","title","price","priceQR","topicJSON","isSentensePressing","pageShadowingParam","sentenseEn","sentenseKo","sentenseIdx","topicID","numberWithCommas","x","parts","toString","join","d","window","location","search","substring","incryptString","etcparam","qs","parse","decryptParam","decryptURL","Object","assign","inParam","inQuery","href","cid","resultItem","courseToMainJSON","gotoPage","query","str","find","item","i","courseID","tpid","findMainJSON","idx","dir","length","overIdx","fbase","arr","filter","type1","type2","value","newArr","includes","JSON","stringify","text","bytes","CryptoJS","AES","decrypt","make1","enc","Utf8","moduleName","options","axios","clearInterval","setInterval","firstY","scrollY","setTimeout","infoStr","subscriptionType","todayInt","parseInt","Days","local","format","infoArr","productCD","edStr","inMessage","params","response","finally","audioTimeArr","livePlayInfo","totalIdx","src","inID","zzaudio","playEffect","param","json","sentense","timeen","playComplete","bind","st","et","repeat","repeatCnt","play","allplay","pause","vol","setVolume","delay","ms","Promise","resolve","currentSoundTime","intervalTime","settingInterval","interval","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c041158.chunk.js","sourcesContent":["\n\n/**\n * use\n * import EventEmitter, {Event} from \"common/events/EventEmitter\";\n *\n * dispatch\n * EventEmitter.dispatch(Event.EVENT_EXAMPLE, {같이 넘길 파라메터 });\n *\n * subscribe\n * EventEmitter.subscribe(Event.EVENT_EXAMPLE, (options:any)=>{\n *  {같이 넘길 파라메터 }\n * });\n */\nexport class Event {\n\n\tpublic static ON_AUTH_STATE_CHANGED: string = \"onAuthStateChanged\";\n\tpublic static FB_START_LOGIN: string = \"fbStartLogin\";\n\tpublic static IS_APP_READY: string = \"isAppReady\";\n\tpublic static INSERT_PAGE: string = \"insertPage\";\n\tpublic static REPLACE_PAGE: string = \"replacePage\";\n\tpublic static GOTO_BACK: string = \"gotoBack\";\n\tpublic static RESET_PAGE: string = \"resetPage\";\n\tpublic static SHOW_ALERT: string = \"showAlert\";\n\tpublic static HIDE_ALERT: string = \"hideAlert\";\n\tpublic static INIT_AUDIO: string = 'initAudio';\n\tpublic static AUDIO_PLAY_PAUSE: string = 'audioPlayPause';\n\tpublic static AUDIO_STOP: string = 'audioStop';\n\tpublic static SENTENSE_PLAYING: string = 'sentensePlaying';\n\tpublic static SENTENSE_PAUSE: string = 'sentensePause';\n\tpublic static CONTROL_UI_UPDATE: string = 'controlUIUpdate';\n\tpublic static SET_BTN_PLAY_STATE: string = 'setBtnPlayState';// 외부에서 버튼 상태를 변경할때 발생\n\tpublic static CHANGE_BTN_PLAY_STATE: string = \"changeBtnPlayState\";// 버튼 자신이 변경되면 외부에 알리느라 발생\n\tpublic static SHOW_NOTI_MESSAGE: string = \"showNotiMessage\";\n\tpublic static PURCHASE_COMPLETE: string = \"purchaseComplete\";\n\tpublic static FREETIME_UPDATED: string = \"freetimeUpdated\";\n\tpublic static CLICK_HOTCLIP_THUMB: string = \"clickHotclipThumb\";\n\tpublic static SHOW_LOADING: string = \"showLoading\";\n\tpublic static HIDE_LOADING: string = \"hideLoading\";\n\tpublic static AUDIO_PLAY_COUNT: string = \"audioPlayClunt\";\n\tpublic static CHANGE_TPID: string = \"changeTPID\";\n\tpublic static SHOW_TOAST_MESSAGE: string = \"showToastMessage\";\n\n\n\tpublic events: any = {};\n\tpublic dispatch(event: string, data?: any): void {\n\t\tif (!this.events[event]) return;\n\t\tthis.events[event].forEach((callback: (arg0: any) => void) =>\n\t\t\tcallback(data)\n\t\t);\n\t}\n\tpublic subscribe(event: string, callback: any): void {\n\t\tif (!this.events[event]) this.events[event] = [];\n\t\tthis.events[event].push(callback);\n\t}\n\tpublic remove(event: string, callback?: any): void {\n\t\t// if (this.events[event]) this.events[event] = null;\n\t\tif (this.events[event]) this.events[event].splice(this.events[event].indexOf(callback), 1);\n\t}\n}\n\nexport default new Event();\n","import { atom, RecoilState } from \"recoil\";\n\n// export const config = {\n//     appid: \"com.kareui.caseteenglish\",\n//     inappIDs: {\n//         \"unlock01\": \"com.kareui.caseteenglish.unlock01\"\n//     }\n// }\n\nexport const isLoadingState = atom({\n    key: \"isLoadingState\",\n    default: false,\n})\n\n// // playControl detailPanel state\nexport const isCloseDetailPanelState = atom({\n    key: \"isCloseDetailPanelState\",\n    default: true,\n})\n\nexport const scriptModeState = atom({\n    key: \"scriptModeState\",\n    default: 'ek',\n})\n\nexport const sentenseRepeatIdxState: RecoilState<number> = atom({\n    key: \"sentenseRepeatIdxState\",\n    default: 9999,\n})\n\nexport const btnRepeatModeUpdateState: RecoilState<number> = atom({\n    key: \"btnRepeatModeUpdateState\",\n    default: 0,\n})\n\nexport const setSceneIdxState: RecoilState<number> = atom({\n    key: \"setSceneIdxState\",\n    default: 0,\n})\n\nexport const isYTModuleState = atom({\n    key: \"isYTModuleState\",\n    default: false,\n})\n\nexport const ytbSentenseHideState: RecoilState<string> = atom({\n    key: \"ytbSentenseHideState\",\n    default: '00',\n})\n\n// export const homeListSortState: RecoilState<string> = atom({\n//     key: \"homeListSortState\",\n//     default: 'reverse',\n// })\n// export const updateCntPlayState: RecoilState<number> = atom({\n//     key: \"updateCntPlayState\",\n//     default: 0,\n// })\n\n// export const wbIsOpenNavState = atom({\n//     key: \"wbIsOpenNavState\",\n//     default: false,\n// });\n\n// export const tpidState = atom({\n//     key: \"tpidState\",\n//     default: '',\n// })\n\n// export const cidState = atom({\n//     key: \"cidState\",\n//     default: '',\n// })\n\n// 강화훈련\nexport const isShowShadowingState = atom({\n    key: \"isShowShadowingState\",\n    default: false,\n})\n\nexport const printCourseIDState = atom({\n    key: \"printCourseIDState\",\n    default: '',\n})\n\n\n\n\nexport default {};","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { printCourseIDState } from '../core/store';\nconst printJSON = require('../resource/mainJSONPrint.json');\nconst PrintTable = () => {\n\n    const [printCourseID, setprintCourseID] = useRecoilState(printCourseIDState);\n    const selectCourseJSON = printJSON.find((item: any, i: number) => {\n        // console.log('printJSONitem.courseID === printCourseID', item, item.info.courseID,'__', printCourseID)\n        if (item.info.courseID === printCourseID) {\n            return item;\n        }\n\n    });\n    let tr = [];\n    if (selectCourseJSON) {\n        tr = selectCourseJSON.list.map((item: any, i: number) => {\n            return <DaySentenses arr={item} idx={i} key={i} />\n        })\n    }\n    // const tr = selectCourseJSON.list.map((item:any, i:number)=>{\n    //     return <div>{item.ko}, {item.en} </div>\n    // })\n    // console.log('printJSONitem1',selectCourseJSON)\n    return (\n        <div className=\"PrintTable\">\n            {\n                selectCourseJSON && <div>\n                    <div className=\"header\">\n                        <div className=\"row-right\">\n                            <button className=\"btn btn-border\" onClick={() => {\n                                setprintCourseID('');\n                            }}><i className=\"fas fa-arrow-left\"></i> 돌아가기</button>\n                            <button className=\"btn btn-border\" onClick={() => {\n                                // console.log((document as any).getElementById(\"script-print-table\"))\n                                // new TableExport((document as any).getElementById(\"script-print-table\"),{\n\n                                //     filename:'카셋회화훈련-인턴',\n                                //     formats:['xlsx'],\n                                // });\n                                (window as any).printScript('카셋회화훈련-인턴');\n                            }}><i className=\"fas fa-file-download\"></i> 엑셀로 다운로드</button>\n                        </div>\n\n                    </div>\n                    <table id=\"script-print-table\">\n                        <thead>\n                            <tr >\n                                <td >일자</td>\n                                <td >No.</td>\n                                <td >한글</td>\n                                <td >영어</td>\n                                <td >확인</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {tr}\n                            {/* <tr >\n                                <td rowSpan={3}>&nbsp;&nbsp;&nbsp;</td>\n                                <td >&nbsp;</td>\n                                <td >&nbsp;</td>\n                                <td >&nbsp;</td>\n                                <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr> */}\n                        </tbody>\n                    </table>\n\n\n                </div>\n            }\n        </div>\n    );\n};\n\nconst DaySentenses = ({\n    arr,\n    idx,\n}: {\n    arr: any,\n    idx: number,\n}) => {\n    const SentenseList = arr.map((item: any, i: number) => {\n        return <tr key={'tr' + i} className=\"tr-day\" >\n            {i === 0 && <td key={'tr' + i} rowSpan={arr.length}>DAY{idx + 1}</td>}\n            <td data-tableexport-xlsxformatid=\"1\">{i + 1}</td>\n            <td className=\"td-text-left\">{item.ko}</td>\n            <td className=\"td-text-left\">{item.en}</td>\n            <td className=\"td-memo\">&nbsp;</td>\n        </tr>\n    })\n    return (<>\n        {SentenseList}\n    </>);\n}\n\nexport default PrintTable;","import extend from 'deep-extend';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport { firebaseConfig } from \"../env\";\nimport EventEmitter, { Event } from \"../core/EventEmitter\";\nimport Days from '../core/Days';\n\nfirebase.initializeApp(firebaseConfig);\n\nclass FBase {\n    userInfo: any = 'loading';// loading인 경우 아예 정보 받기 전임\n    initUserInfoMerge: boolean = false;\n    userMoreInfo: {\n        email: string,\n        uid: string,\n        repeatMode: 'ALL' | '1' | '' | 'nil',\n        // buyCourses: string[],\n        subscriptionInfo: string,\n        showClips: string[],\n        keepClips: string[],\n        keepSentense: string[],\n        doneSentense: string[],\n        historyClips: string[],\n    } = {\n            email: '',\n            uid: '',\n            repeatMode: '1',\n            // buyCourses: [],\n            subscriptionInfo: '3m##20210101##20200505',// null\n            showClips: [],\n            keepClips: [],\n            keepSentense: [],\n            doneSentense: [],\n            historyClips: [],\n        };\n    initLogin() {\n        authService.onAuthStateChanged((user) => {\n\n            console.log('authService', user);\n\n            this.userInfo = user;\n\n            // 사용자 셋팅정보 조회\n            // 정보가 null인 경우 기본 정보 생성\n            // 있는경우 정보 덮어씌우기\n            if (this.userInfo) {\n\n                const docName = this.makeDocNameWithUserInfo();\n                console.log('tmplog_authService1', docName);\n                dbService.collection('userstatus').doc(docName).get().then((docs: any) => {\n                    console.log('tmplog_authService3');\n                    // console.log('docs.data()', docs.data());\n                    const data = docs.data();\n                    console.log('docs.data()', docName, data);\n                    if (data) {\n                        // data.uid = this.userMoreInfo.uid;\n                        console.log('docs.data()1');\n                        this.userMoreInfo = extend(this.userMoreInfo, data);\n                    } else {\n                        console.log('docs.data()2');\n                        // 최초 진입(데이터 생성)\n                        this.userMoreInfo = this.userMoreInfo;\n                        this.syncMoreInfo();\n                    }\n                    console.log('docs.data()-1');\n\n                    this.userMoreInfo.email = this.userInfo.email;\n                    this.userMoreInfo.uid = this.userInfo.uid;\n                    this.initUserInfoMerge = true;\n                    EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n                }).catch(function (err) {\n                    // console.log('tmplog_authService4err', err);\n                    EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, null);\n                    // if (err.code == 'failed-precondition') {\n                    //     // Multiple tabs open, persistence can only be enabled\n                    //     // in one tab at a a time.\n                    //     // ...\n                    // } else if (err.code == 'unimplemented') {\n                    //     // The current browser does not support all of the\n                    //     // features required to enable persistence\n                    //     // ...\n                    // }\n                });\n                // dbService.collection('userstatus').get().then((docs: any) => {\n                //     let searchUserDocCnt = 0;// 사용자에 대한 문서가 여러개인경우 오류\n                //     docs.docs.forEach((doc: any) => {\n\n                //         const data = doc.data();\n                //         console.log('userMoreInfoa0---', data, data.uid, '-', this.userInfo.uid)\n                //         if (data.uid === this.userInfo.uid) {\n                //             searchUserDocCnt++;\n                //             console.log('userMoreInfoab', this.userMoreInfo, data);\n                //             // 현재 데이터 존재하는경우\n                //             this.userMoreInfo = extend(this.userMoreInfo, data);\n                //         } else {\n                //\n                //         }\n                //         EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n\n                //     })\n                //     // console.log('userMoreInfoac', searchUserDocCnt);\n                //     // // 최초 진입\n                //     // if (searchUserDocCnt === 0) {\n                //     //     // 최초 진입(데이터 생성)\n                //     //     this.userMoreInfo = extend(this.userMoreInfo, {\n                //     //         uid: this.userInfo.uid\n                //     //     });\n                //     //     // 저장\n                //     //     // dbService.collection('userstatus').add(this.userMoreInfo).then((res: any) => {\n                //     //     //     console.log('tmplog_dbsync', res)\n                //     //     // });\n                //     //     this.syncMoreInfo();\n                //     // }\n                //     // // 데이터 중복\n                //     // if (searchUserDocCnt > 1) {\n                //     //     alert('에러' + searchUserDocCnt)\n                //     // }\n                //     // console.log('userMoreInfoarr', this.userMoreInfo)\n                //     // EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n                // });\n            } else {\n                console.log('tmplog_authService2');\n                console.log('userMoreInfoarr2', this.userMoreInfo)\n                EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n            }\n\n\n\n        });\n    }\n\n    isLogin() {\n        let r = true;\n        if (this.userInfo === null || this.userInfo === 'loading') {\n            r = false;\n        }\n        return r;\n    }\n    isSubscriptionInfo(): string {\n\n        // 로그인이 안 된 경우\n        if (!this.isLogin()) {\n            return 'needLogin';\n        }\n        if (!this.userMoreInfo.subscriptionInfo) {\n            return 'needPurchase';\n        }\n        return this.userMoreInfo.subscriptionInfo;\n    }\n\n    // isAvailableBook(cid: string): 'available' | 'needLogin' | 'needPurchase' {\n\n    //     // 로그인이 안 된 경우\n    //     if (!this.isLogin()) {\n    //         return 'needLogin';\n    //     }\n    //     console.log('tmplog_this.userInfo', this.userMoreInfo)\n    //     // 구매 목록에 없는 경우\n    //     if (!this.userMoreInfo.buyCourses.includes(cid)) {\n    //         return 'needPurchase';\n    //     }\n    //     return 'available';\n    // }\n    syncMoreInfo() {\n        console.log('docs.data()-sync');\n        // 유저 로그인 전이면\n        if (!this.userInfo || this.userInfo === '' || this.userInfo === 'loading') {\n            // alert(this.userInfo);\n            return;\n        }\n        // 유저 데이터를 불러오기 전이면\n        if (!this.initUserInfoMerge) return;\n\n        dbService.collection(\"userstatus\").doc(this.makeDocNameWithUserInfo()).set(this.userMoreInfo, { merge: true }).then(function () {\n            console.log(\"Document successfully written!\");\n        });\n    }\n    makeDocNameWithUserInfo() {\n        let id = this.userInfo.email.split('@')[0];\n        const reg = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n        if (reg.test(id)) {\n            id = id.replace(reg, '');\n        }\n        id += 'mXCeNH6A5fjdrDfaOjDe';// 여유있게 자르기위해 랜덤 문자 추가\n        id = id.substr(0, 10);// 10자리로 자름\n        // console.log('this.userInfo.email', this.userInfo.email);\n        return id + this.userInfo.uid;\n    }\n    callLogin(emailPw: {\n        email: string,\n        pw: string,\n    }, callback: (userInfo: any) => void) {\n\n    }\n    sendPasswordResetEmail(email: string) {\n        var auth = firebase.auth();\n        auth.sendPasswordResetEmail(email).then(function () {\n            alert(email + '로 발송된 이메일을 확인 해 주세요.')\n        }).catch((error) => {\n            console.log(error);\n            alert(this.convertErrorMessage(error));\n        });\n    }\n    convertErrorMessage(error: any) {\n        const errorMessage: any = {\n            'auth/invalid-email': '올바른 이메일을 입력하세요.',\n            'auth/invalidNewPw': '입력한 비밀번호가 일치하지 않습니다.',\n            'auth/weak-password': '6자리 이상의 비밀번호를 입력하세요',\n            'auth/wrong-password': '비밀번호가 올바르지 않습니다.',\n            'auth/user-not-found': '해당 가입정보가 없습니다. 정보를 확인 또는 회원가입을 해주세요.',\n            'auth/email-already-in-use': '이미 가입된 이메일입니다.',\n\n        }\n        const convertMessage = errorMessage[error.code]\n        if (convertMessage) {\n            return convertMessage;\n        }\n        console.log(error);\n        return error.message;\n    }\n}\n\nexport default new FBase();\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","export const firebaseConfig = {\n    apiKey: \"AIzaSyBq__j-SvDbukmkLD5CaFo9rKa4706HHJk\",\n    authDomain: \"casetebook.firebaseapp.com\",\n    databaseURL: \"https://casetebook.firebaseio.com\",\n    projectId: \"casetebook\",\n    storageBucket: \"casetebook.appspot.com\",\n    messagingSenderId: \"863352106334\",\n    appId: \"1:863352106334:web:1a3de357b2edff427ef3cf\",\n    measurementId: \"G-0BQB2PPQBE\"\n};\n\n\n/*\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read: if true\n      allow write: if request.auth.uid == request.resource.data.uid || request.resource.data.role == 'admin'\n    }\n  }\n}\n*/","\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc)\n\n\n\nexport default dayjs;\n","import axios from 'axios';\nimport CryptoJS from 'crypto-js';\nimport EventEmitter, { Event } from '../core/EventEmitter';\nimport fbase from '../fb/fbase';\nimport qs from 'qs';\nimport Days from '../core/Days';\n\nconst mainJSON = require('../resource/mainJSON.json');\nconst key = \"XDVl1SGxRn\";\nconst queryDivideStr = 'AGQpG10Xdk&';\nlet scrollingLazyTime: number = 0;\nlet scrollingTick: any = null;\n\nexport const productTable: any = {\n    \"1m\": {\n        title: \"1개월\",\n        price: 2400,\n        priceQR: '4b001708',\n    },\n    \"3m\": {\n        title: \"3개월\",\n        price: 6000,// 2000*3\n        priceQR: 'bb801565',\n    },\n    \"6m\": {\n        title: \"6개월\",\n        price: 9000,//1500*6\n        priceQR: '119404860',\n    },\n    \"12m\": {\n        title: \"12개월\",\n        price: 14400,// 1200*12,// \n        priceQR: '1c2008196',\n    },\n}\n\nclass Data {\n    mainJSON: any = mainJSON;\n    topicJSON: any;\n    isSentensePressing: boolean = false;\n    public pageShadowingParam: {\n        sentenseEn: string,\n        sentenseKo: string,\n        sentenseIdx: number,\n        topicID: string,\n    } = {\n            sentenseEn: '',\n            sentenseKo: '',\n            sentenseIdx: -1,\n            topicID: '',\n        }\n\n\n    getRootPath() {\n        return '/';\n    }\n\n    parseQuery() {\n        // const queryDivideStr = 'AGQpG10Xdk&';\n        const d = (window as any).location.search.substring(3);\n        const incryptString = d.split(queryDivideStr)[0];\n        const etcparam = qs.parse(d.split(queryDivideStr)[1]);\n        const decryptParam = this.decryptURL(incryptString);\n        return Object.assign({}, decryptParam, etcparam);\n    }\n\n    // setParameter => gotoPage\n    gotoPage(inParam: string, inQuery: string) {\n        if (!inQuery || inQuery === '') {\n            window.location.href = '/';\n            return;\n        }\n        // alert('TODO:gotoPage');\n        window.location.href = `/${inParam}?d=${inQuery}`;\n    }\n    // 코스 메인으로 가기\n    gotoCourseMainPage(cid: string) {\n        const resultItem = this.courseToMainJSON(cid);\n        this.gotoPage('CourseMain', resultItem.query);\n    }\n    dateMyFormat(str: string) {\n        return `${str.substr(0, 4)}.${str.substr(4, 2)}.${str.substr(6, 2)}`\n    }\n    // mainJson에서 해당 코스 목록 조회\n    courseToMainJSON(cid: string) {\n        return mainJSON.find((item: any, i: number) => {\n            return item.courseID === cid;\n        });\n    }\n\n    courseToMainIdx(cid: string, tpid: string) {\n        let returnIdx = 0;\n        if (!mainJSON) return returnIdx;\n        const findMainJSON = mainJSON.find((item: any, i: number) => {\n            return item.courseID === cid;\n            // console.log('item.courseID === cid', item.courseID, cid);\n            // if (item.courseID === cid) {\n            //     returnIdx = i;\n            // }\n        });\n        console.log('findMainJSONfindMainJSON,', findMainJSON);\n        // findMainJSON.item.forEach((item: any, i: number) => {\n\n        // })\n        return returnIdx;\n    }\n\n    // 이전/다음 가기\n    gotoNextPrev(idx: number, cid: string, dir: 'next' | 'prev') {\n        const resultItem = mainJSON.find((item: any, i: number) => {\n            return item.courseID === cid;\n        })\n        if (idx === 0 && dir === 'prev') {\n            alert('이전 목록이 없습니다.(첫 번째 토픽)');\n            return;\n        }\n        if (idx === resultItem.item.length && dir === 'next') {\n            alert('마지막 목록 입니다.');\n            return;\n        }\n        const overIdx = dir === 'next' ? 1 : -1;\n        this.gotoPage('CoursePlay', resultItem.item[idx + overIdx].query);\n    }\n    setClipHistory(tpid: string) {\n\n        if (!fbase.userMoreInfo.historyClips) {\n            fbase.userMoreInfo.historyClips = [];\n        }\n\n        const arr = fbase.userMoreInfo.historyClips.filter((item: string) => {\n            // 동일 히스토리 존재하면 제거 \n            return item !== tpid;\n        })\n\n        arr.push(tpid);\n\n        fbase.userMoreInfo.historyClips = arr;\n        // debugger;\n        // appBridge.syncStorageData();\n        fbase.syncMoreInfo();\n    }\n    setSettingKeepClipSentense(\n        type1: 'clip' | 'sentense' | 'done',\n        type2: 'add' | 'remove',\n        value: any) {\n        console.log('setSettingKeepClipSentense', type1, type2, value);\n        let arr: string[] = [];\n        let newArr: string[] = [];\n        if (type1 === 'clip') {\n\n            arr = fbase.userMoreInfo.keepClips;\n        } else if (type1 === 'sentense') {\n            arr = fbase.userMoreInfo.keepSentense;\n        } else if (type1 === 'done') {\n            arr = fbase.userMoreInfo.doneSentense;\n        }\n        if (arr.includes(value)) {\n            // 포함되어있을때 삭제 케이스 \n            if (type2 === 'remove') {\n                // 삭제 \n                newArr = arr.filter((item, i) => {\n                    return item !== value;\n                });\n            }\n\n        } else {\n            // 불포함인데 포함 케이스 \n            if (type2 === 'add') {\n                // 포함 \n                arr.push(value)\n                newArr = JSON.parse(JSON.stringify(arr));\n            }\n\n        }\n\n        if (type1 === 'clip') {\n            fbase.userMoreInfo.keepClips = newArr;\n\n        } else if (type1 === 'sentense') {\n            fbase.userMoreInfo.keepSentense = newArr;\n\n        } else if (type1 === 'done') {\n            fbase.userMoreInfo.doneSentense = newArr;\n\n        }\n\n        fbase.syncMoreInfo();\n    }\n    decryptURL(text: string) {\n        try {\n            text = text.substring(7);\n            const bytes = CryptoJS.AES.decrypt(text, key);\n            let parse = null;\n            const make1 = bytes.toString(CryptoJS.enc.Utf8);\n            parse = JSON.parse(make1);\n            return parse;\n        } catch (err) {\n            // console.error(err);\n            return;\n        }\n    }\n    numberWithCommas = (x: number) => {\n        let parts = x.toString().split(\".\");\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        return parts.join(\".\");\n    }\n    showAlert(message: string) {\n        EventEmitter.dispatch(Event.SHOW_ALERT, {\n            moduleName: 'AlertBasic',\n            message: message,\n        });\n    }\n    showAlertModule(moduleName: string) {\n        EventEmitter.dispatch(Event.SHOW_ALERT, {\n            moduleName: moduleName\n        });\n    }\n    hideAlert() {\n        EventEmitter.dispatch(Event.HIDE_ALERT, {});\n    }\n    showBuyMessage({\n        courseID\n    }: {\n        courseID: string\n    }) {\n\n        EventEmitter.dispatch(Event.CHANGE_BTN_PLAY_STATE, \"stop\");\n        EventEmitter.dispatch(Event.SHOW_ALERT, {\n            moduleName: \"AlertNoticeInapp\",\n            courseID: courseID,\n        })\n    }\n\n    showToastMessage(options: {\n        message: string,\n        mtime: number\n    }) {\n        EventEmitter.dispatch(Event.SHOW_TOAST_MESSAGE, options)\n    }\n    async getTopicJSON(cid: string, tpid: string) {\n        // this.topicJSON = await axios.get(`/resource/courses/${cid}/topics/${tpid}/mm.json`, {}).;\n        return await axios.get(`/resource/courses/${cid}/topics/${tpid}/mm.json`, {});\n    }\n    // sentense클릭동안 스크롤락 실행\n    sentensePressing() {\n        this.isSentensePressing = true;\n        scrollingLazyTime = 2000;// 2초\n        if (scrollingTick) {\n            clearInterval(scrollingTick);\n        }\n        scrollingTick = setInterval(() => {\n            scrollingLazyTime = scrollingLazyTime - 500;\n            if (scrollingLazyTime <= 0) {\n                this.isSentensePressing = false;\n                scrollingLazyTime = 0;\n                clearInterval(scrollingTick);\n            }\n        }, 500);\n    }\n    // 현재 화면이 스크롤링 중인가?\n    isScrolling(callback: (result: boolean) => void) {\n        const firstY = window.scrollY;\n        setTimeout(() => {\n            if (firstY === window.scrollY) {\n                callback(false);\n            } else {\n                callback(true);\n            }\n        }, 100);\n    }\n\n    // 구독상태 empty: 정보없음 on:구독중 expired01:기간만료\n    getSubscriptionState(infoStr: string) {\n        let subscriptionType = 'empty';\n        if (['needLogin', 'needPurchase'].includes(infoStr)) {\n            subscriptionType = infoStr;\n        } else {\n            let todayInt = parseInt(Days.utc().local().format('YYYYMMDD'));\n            const infoArr = infoStr.split('##');\n\n            let [productCD, stStr, edStr] = infoArr;\n            if (infoArr.length === 3) {\n                if (productCD.substr(0, 1) === 't') {\n                    // 임시코드인 경우 \n                    productCD = productCD.substr(1);\n                }\n                const productCDtoStr: string = productTable[productCD].title;\n                subscriptionType = 'on'\n\n                if (todayInt > parseInt(edStr)) {\n                    // 기간 지난경우\n                    subscriptionType = 'expired01';\n\n                }\n            } else {\n                subscriptionType = 'empty';\n\n            }\n\n        }\n        return subscriptionType;\n    }\n    sendTelelog(inMessage: string) {\n        // https://us-central1-loop-fa69b.cloudfunctions.net/sendTelegraf?message=testmessage\n        axios.get('https://us-central1-loop-fa69b.cloudfunctions.net/sendTelegraf', {\n            params: {\n                message: `${inMessage}`\n            }\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n            .finally(function () {\n                // always executed\n            });\n    }\n}\n\nexport default new Data();","import classnames from 'classnames';\nimport { send } from 'process';\nimport QRCode from \"qrcode.react\";\nimport React, { useState } from 'react';\nimport {\n    BrowserView, isBrowser,\n    MobileView\n} from \"react-device-detect\";\nimport { atom, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport data, { productTable } from '../core/data';\nimport Days from '../core/Days';\nimport fbase from '../fb/fbase';\n\nconst paymentStepState = atom({\n    key: \"paymentStepState\",\n    default: 0,\n})\nconst selectPlanState = atom({\n    key: \"selectPlanState\",\n    default: '',\n})\n\nconst sendTelemessage = ({\n    sendTitle,\n    email,\n    uid,\n    priceCode,\n    moreStr,\n}: {\n    sendTitle: string,\n    email: string\n    uid: string\n    priceCode: string,\n    moreStr: string,\n}) => {\n    data.sendTelelog(`${sendTitle}::${email}##${uid}##${priceCode}##${moreStr}`)\n}\nconst AlertBuyProduct2 = ({\n    openParam\n}: {\n    openParam: any\n}) => {\n\n    const paymentStep = useRecoilValue(paymentStepState);\n\n    return (\n        <div className=\"AlertBuyProduct2\">\n            {paymentStep === 0 && <PayStep01 />}\n            {paymentStep === 1 && <PayStep02 />}\n        </div>\n    );\n};\n\nconst PayStep01 = () => {\n    const setPaymentStep = useSetRecoilState(paymentStepState);\n    const [selectPlan, setSelectPlan] = useRecoilState(selectPlanState);\n    return (<div className=\"PayStep01\">\n        <div className=\"header\">\n            <div className=\"title\">\n                구독기간 선택\n                </div>\n            <button className=\"btn btn-close\" onClick={() => {\n                data.hideAlert();\n            }}><i className=\"fas fa-times\"></i></button>\n        </div>\n        <ul className=\"plan-list\">\n            <li className={classnames([\"btn-plan-radio\", { active: selectPlan === '1m' }])} onClick={() => {\n                setSelectPlan('1m');\n            }}>\n                <div className=\"bullet\"><i className=\"fas fa-check\"></i></div>\n                <div>1개월 구독<div className=\"price\">{data.numberWithCommas(productTable['1m'].price)}원<span className=\"per-month\">(=2,400원/월)</span></div></div>\n\n            </li>\n            <li className={classnames([\"btn-plan-radio\", { active: selectPlan === '3m' }])} onClick={() => {\n                setSelectPlan('3m');\n            }}>\n                <div className=\"bullet\"><i className=\"fas fa-check\"></i></div>\n                <div>3개월 구독<div className=\"price\">{data.numberWithCommas(productTable['3m'].price)}원<span className=\"per-month\">(=2,000원/월)</span></div></div>\n\n            </li>\n            <li className={classnames([\"btn-plan-radio\", { active: selectPlan === '6m' }])} onClick={() => {\n                setSelectPlan('6m');\n            }}>\n                <div className=\"bullet\"><i className=\"fas fa-check\"></i></div>\n                <div>6개월 구독<div className=\"price\">{data.numberWithCommas(productTable['6m'].price)}원<span className=\"per-month\">(=1,500원/월)</span></div></div>\n\n            </li>\n            <li className={classnames([\"btn-plan-radio\", { active: selectPlan === '12m' }])} onClick={() => {\n                setSelectPlan('12m');\n            }}>\n                <div className=\"bullet\"><i className=\"fas fa-check\"></i></div>\n                <div>12개월 구독<div className=\"price\">{data.numberWithCommas(productTable['12m'].price)}원<span className=\"per-month\">(=1,200원/월)</span></div></div>\n            </li>\n        </ul>\n        <div className=\"footer\">\n            <button className={classnames([\"btn-confirm\", { active: selectPlan !== '' }])} onClick={() => {\n                if (selectPlan === '') {\n                    alert('구독기간을 선택해 주세요.');\n                    return;\n                }\n                // console.log('fbase.userMoreInfo', fbase.userMoreInfo)\n                sendTelemessage({\n                    sendTitle: '결제진행버튼',\n                    email: fbase.userMoreInfo.email,\n                    uid: fbase.userMoreInfo.uid,\n                    priceCode: selectPlan,\n                    moreStr: '',\n                });\n                setPaymentStep(1)\n            }}>결제진행</button>\n        </div>\n\n    </div>);\n}\n\nconst PayStep02 = () => {\n    const [buyStep, setBuyStep] = useState(0);\n    const [stepCD, setStepCD] = useState(isBrowser ? 1 : 0);\n    const [selectPlan, setSelectPlan] = useRecoilState(selectPlanState);\n    if (isBrowser) {\n        // 브라우져는 바로 30초 카운팅\n        setTimeout(() => {\n            setStepCD(2);\n        }, 15 * 1000);\n    }\n    const qrurl = 'https://qr.kakaopay.com/281006012180682200001379' + productTable[selectPlan].priceQR;\n    return (<div className=\"PayStep02\">\n        <div className=\"header\">\n            <div className=\"title\">\n                <img className=\"kakaopay-logo\" src=\"https://img.etnews.com/photonews/2009/1337259_20200915103744_396_0001.jpg\"></img>카카오페이 송금결제\n                </div>\n            <button className=\"btn btn-close\" onClick={() => {\n                data.hideAlert();\n            }}><i className=\"fas fa-times\"></i></button>\n        </div>\n\n        <div className=\"message\">\n            {productTable[selectPlan].title} 구독( {data.numberWithCommas(productTable[selectPlan].price)}원 )\n            </div>\n\n        <div className=\"step step1\">\n\n            <div className=\"step1-in\">\n                <BrowserView>\n                    <ul>\n                        <li className=\"title\">\n                            <div className=\"bullet-no\">1</div>\n                            휴대폰 카카오톡으로 아래의 QR코드 스캔 및 결제 후,<br></br>\n                            <div className=\"small\">\n                                <div>카카오톡 송금 창 메세지 입력란에</div>\n                                <div>가입하신 이메일({fbase.userMoreInfo.email})을 꼭 입력해 주세요.</div>\n                            </div>\n\n                        </li>\n                        <li className=\"qr-container\">\n                            {\n                                stepCD > 0\n                                    ?\n                                    <QRCode value={qrurl} />\n                                    :\n                                    <div className=\"btn-create-qr\" onClick={() => {\n                                        setStepCD(1);\n\n                                    }}>\n                                        <div className=\"cover\">\n                                            <i className=\"fas fa-redo-alt\"></i>\n                                            <div className=\"desc\">송금코드생성</div>\n                                        </div>\n                                        <div className=\"dummy\"><QRCode value=\"qr코드 생성용 로딩입니다\" /></div>\n                                    </div>\n                            }\n\n                        </li>\n                        <li className=\"title\"><div className=\"bullet-no\">2</div> 결제 후 승인요청 버튼을 눌러주세요.</li>\n                    </ul>\n\n                </BrowserView>\n                <MobileView>\n                    <ul>\n                        <li className=\"title\">\n                            <div className=\"bullet-no\">1</div>\n                            카카오톡 송금 창 메세지 입력란에 가입하신 이메일(macaoshu@gmail.com)을 꼭 입력해 주세요.\n                        </li>\n                        <li className=\"qr-container\">\n                            <a onClick={() => {\n                                setTimeout(() => {\n                                    setStepCD(2);\n                                }, 15 * 1000);\n                            }} className=\"btn-gotokakao\" href={qrurl} target=\"_blank\">카카오페이 결제하기<i className=\"fas fa-angle-right\"></i></a>\n                        </li>\n                        <li className=\"title\"><div className=\"bullet-no\">2</div> 결제 후 승인요청 버튼을 눌러주세요.</li>\n                    </ul>\n\n                </MobileView>\n                {/* <div>반드시 메세지에 가입하신 이메일 주소를 입력 해 주세요.</div> */}\n            </div>\n        </div>\n\n        <div className=\"step step2\">\n            <div className=\"notice\">\n                문제가 있는경우 <a href=\"mailto:dev@casete.in\">이메일</a> 및 <a href=\"http://pf.kakao.com/_HxlMJK/chat\" target=\"_blank\">카카오채널</a>로 문의 주세요.\n                </div>\n            <button className={classnames([\"btn-confirm\", `stepCD-${stepCD}`])} onClick={() => {\n                if (stepCD < 2) {\n                    alert('결제 완료 후 승인요청을 해주세요.');\n                    return;\n                }\n                alert('승인이 완료되면(결제 후 평균 15분 이내 승인) 내정보 > 구입목록에서 확인하실 수 있습니다. ')\n                const monNum = ({\n                    \"1m\": 1,\n                    \"3m\": 3,\n                    \"6m\": 6,\n                    \"12m\": 12\n                } as any)[selectPlan];\n                const todayStr = Days.utc().local().format('YYYYMMDD');\n                const enddayStr = Days(todayStr).add(monNum, 'month').format('YYYYMMDD')\n                const fbasesubscriptionInfo = `t${selectPlan}##${todayStr}##${enddayStr}`;\n                fbase.userMoreInfo.subscriptionInfo = fbasesubscriptionInfo;\n                sendTelemessage({\n                    sendTitle: '승인요청',\n                    email: fbase.userMoreInfo.email,\n                    uid: fbase.userMoreInfo.uid,\n                    priceCode: selectPlan,\n                    moreStr: fbasesubscriptionInfo,\n                });\n                fbase.syncMoreInfo();\n            }}>승인요청</button>\n        </div>\n\n    </div>);\n}\n\n// export default AlertBasic;\nexport default AlertBuyProduct2;","import classnames from 'classnames';\nimport { css } from 'emotion';\nimport qs from 'qs';\nimport React, { useState } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport WCourse from '../components/WCourse';\nimport data from '../core/data';\nimport EventEmitter, { Event } from '../core/EventEmitter';\nimport { printCourseIDState } from '../core/store';\nimport fbase from '../fb/fbase';\nimport { Tags } from './PageHome';\n\nconst selfName = \"CourseMain\";\nconst CourseMain = ({\n    location\n}: {\n    location: any\n}) => {\n    // const query: any = qs.parse(location.search, {\n    //     ignoreQueryPrefix: true // /about?details=true 같은 쿼리 주소의 '?'를 생략해주는 옵션입니다.\n    // });\n    const [render, setRender] = useState(0);\n    const d = location.search.substring(3);\n    const decryptQuery = data.decryptURL(d);\n    const cid = (decryptQuery && decryptQuery.cid) ? decryptQuery.cid : '';\n    EventEmitter.subscribe(Event.ON_AUTH_STATE_CHANGED, () => {\n        setRender(Math.random());\n    });\n    return (\n        <div>\n            {\n                cid\n                    ?\n                    <CourseMainList cid={cid} />\n                    :\n                    <div>\n                        없는 경로 입니다.<br></br>\n                        <button onClick={() => {\n                            data.gotoPage('/', '')\n                        }}>메인페이지로 돌아가기</button>\n                    </div>\n            }\n        </div>\n    );\n};\n\nconst CourseMainList = ({\n    cid\n}: {\n    cid: string\n}) => {\n    const setprintCourseID = useSetRecoilState(printCourseIDState);\n    const mainJSONFilter = data.mainJSON.filter((item: any, i: number) => {\n        return item.courseID === cid;\n    })\n    const courseItemListJSON = mainJSONFilter[0];\n    const getSubscriptionState = data.getSubscriptionState(fbase.isSubscriptionInfo());\n    const isOwner = !['needLogin', 'needPurchase'].includes(fbase.isSubscriptionInfo());\n\n    return (\n        <div className=\"CourseMainList\">\n            <div className={css`height:20px;`}></div>\n            <div className=\"contents\">\n                <div className=\"course-item\">\n                    <div className={classnames([\"cover-img\", css`\n                        background-image: url(\"${data.getRootPath()}resource/courses/${courseItemListJSON.courseID}/cover.jpg\");\n                    `])}>\n                    </div>\n                    <div className=\"info\">\n                        <h3>{courseItemListJSON.title}</h3>\n                        <div className=\"info-sub\">\n                            <div>{courseItemListJSON.item.length}개 코스</div>\n                            <div className=\"tags\">\n                                <Tags str={courseItemListJSON.tags} key={courseItemListJSON.courseID} />\n                            </div>\n                            {/* {\n                                isOwner\n                                    ?\n                                    <div>구매완료</div>\n                                    :\n                                    <button className=\"btn btn-border\">구매 1,300원</button>\n                            } */}\n                        </div>\n\n\n                    </div>\n                </div>\n                <div className=\"list-header\">\n                    <div className=\"list-info\">{courseItemListJSON.item.length}개 코스</div>\n                    <div className=\"funcs\">\n                        <button className=\"btn\" onClick={() => {\n                            // alert(courseItemListJSON.courseID)\n                            // setprintCourseID(courseItemListJSON.courseID);\n                            // data.gotoPage('CoursePrint',)\n                            window.location.href = `/CoursePrint?id=${courseItemListJSON.openID}`;\n                        }}><i className=\"fas fa-table\"></i> 엑셀 & 프린트</button>\n                    </div>\n                </div>\n                {cid && <WCourse json={courseItemListJSON} parentName={selfName} />}\n            </div>\n        </div>\n    );\n}\n\nexport default CourseMain;","import EventEmitter, { Event } from \"../core/EventEmitter\";\n\nexport type TLivePlayInfo = {\n    idx?: number | null,// null이면 실행 안하는 중\n    totalIdx?: number,\n    src?: string,\n    json?: any,\n    st?: number,\n    et?: number,\n    callback?: () => void,\n    repeat?: number,\n    interval?: number,\n    speed?: number,\n    repeatCnt?: number,\n    allplay?: boolean,// 전체듣기\n    // allplayModoshi?: boolean,// 전체반복\n}\nlet audioTimeArr: number[];\nclass ZZAudioProgram {\n    get zzaudio() {\n        return (window as any).zzaudio;\n    }\n    livePlayInfo: TLivePlayInfo = {\n        idx: null,\n        totalIdx: 0,\n        src: '',\n    };\n    presetSrc(src: string) {\n        this.livePlayInfo.src = src;\n        // this.zzaudio.presetSrc(src);\n    }\n    playEffect(inID: string) {\n        if (!this.zzaudio) return;\n        this.zzaudio.playEffect(inID);\n    }\n    play(param: TLivePlayInfo) {\n        const that = this;\n        this.livePlayInfo = Object.assign(this.livePlayInfo, param)\n\n        console.log('livePlayInfojson', this.livePlayInfo.json)\n        const idx = this.livePlayInfo.idx = this.livePlayInfo.idx || 0;\n        audioTimeArr = this.livePlayInfo.json.sentense[idx].timeen.split('|');\n        // this.livePlayInfo.repeatCnt = param.repeat;\n        this.livePlayInfo.callback = this.playComplete.bind(that);\n        this.livePlayInfo.st = audioTimeArr[0];\n        this.livePlayInfo.et = audioTimeArr[1];\n        if (param.repeat !== 9999) {\n            if (this.livePlayInfo.repeatCnt) this.livePlayInfo.repeatCnt--;\n        }\n        EventEmitter.dispatch(Event.CONTROL_UI_UPDATE, idx)\n        // EventEmitter.dispatch(Event.SENTENSE_PLAYING,idx)\n        this.zzaudio.play(this.livePlayInfo);\n    }\n    pause() {\n        this.livePlayInfo.idx = null;\n        this.livePlayInfo.allplay = false;\n        this.livePlayInfo.repeat = 0;\n        this.livePlayInfo.repeatCnt = 0;\n        // EventEmitter.dispatch(Event.SENTENSE_PAUSE,this.livePlayInfo.idx)\n        EventEmitter.dispatch(Event.CONTROL_UI_UPDATE, this.livePlayInfo.idx)\n        this.zzaudio.pause();\n    }\n    setVolume(vol: number) {\n        this.zzaudio.setVolume(vol);\n    }\n\n    async playComplete() {\n        // debugger;\n        // console.log('repeatCnt',livePlayInfo.repeatCnt)\n        //\n\n        const currentSoundTime = (audioTimeArr[1] - audioTimeArr[0]);\n        const intervalTime = (() => {\n            const settingInterval: any = this.livePlayInfo.interval;\n            if (settingInterval === 9999) {\n                return currentSoundTime;// 문장길이 +1초\n            } else {\n                return settingInterval * 1000;// 설정타임\n            }\n        })();\n        if (this.livePlayInfo.allplay || this.livePlayInfo.repeat === 9999) {\n            await delay(intervalTime);\n        }\n\n        EventEmitter.dispatch(Event.SENTENSE_PAUSE, this.livePlayInfo.idx)\n        EventEmitter.dispatch(Event.CONTROL_UI_UPDATE, this.livePlayInfo.idx)\n        console.log('allplay', this.livePlayInfo);\n        this.livePlayInfo.repeatCnt = this.livePlayInfo.repeatCnt || 0;\n        if (this.livePlayInfo.repeatCnt > 0) {\n            // this.livePlayInfo.repeat = this.livePlayInfo.repeatCnt;\n            console.log('play-trigger1', this.livePlayInfo);\n            this.play(this.livePlayInfo);\n            return;\n        }\n        if (this.livePlayInfo.allplay) {\n            // debugger;\n            // 다음인덱스\n            const idx = this.livePlayInfo.idx || 0;\n\n            if (this.livePlayInfo.totalIdx) {\n                this.livePlayInfo.idx = idx + 1;\n                // 끝에 도달\n                if (this.livePlayInfo.idx >= this.livePlayInfo.totalIdx) {\n                    this.livePlayInfo.idx = 0;\n                }\n            }\n\n            // 반복 cnt복원\n            this.livePlayInfo.repeatCnt = this.livePlayInfo.repeat;\n            console.log('play-trigger2', this.livePlayInfo);\n            this.play(this.livePlayInfo);\n            return;\n        }\n        function delay(ms: number): Promise<void> {\n            return new Promise<void>(resolve => {\n                setTimeout(() => {\n                    console.log(`${ms} 밀리초가 지났습니다.`);\n                    resolve()\n                }, ms);\n            });\n        }\n        // if(repeatCnt > 0){\n        //     this.play();\n        //     param.repeatCnt\n        // }\n    }\n\n}\n\n\nexport default new ZZAudioProgram();","import qs from 'qs';\nimport React, { useEffect, useState } from 'react';\nconst printJSON = require('../resource/mainJSONPrint.json');\nconst CoursePrint = () => {\n\n    const param = qs.parse(window.location.search.substr(1));\n    const selectCourseJSON = printJSON.find((item: any, i: number) => {\n\n        if (item.info.openID === param.id) {\n            return item;\n        }\n\n    });\n    let tr = [];\n    if (selectCourseJSON) {\n        tr = selectCourseJSON.list.map((item: any, i: number) => {\n            return <DaySentenses arr={item} idx={i} key={i} />\n        })\n    }\n    useEffect(() => {\n\n    }, [])\n\n    return (\n        <div className=\"CoursePrint\">\n            {\n                selectCourseJSON && <div>\n                    <div className=\"header\">\n                        <div className=\"row-right\">\n                            <button className=\"btn btn-border\" onClick={() => {\n\n                                (window as any).printScript('카셋회화훈련-인턴');\n                            }}><i className=\"fas fa-file-download\"></i> 엑셀로 다운로드</button>\n                        </div>\n\n                    </div>\n                    <table id=\"script-print-table\">\n                        <thead>\n                            <tr >\n                                <td >일자</td>\n                                <td >No.</td>\n                                <td >한글</td>\n                                <td >영어</td>\n                                <td >확인</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {tr}\n\n                        </tbody>\n                    </table>\n\n\n                </div>\n            }\n        </div>\n    );\n};\nconst DaySentenses = ({\n    arr,\n    idx,\n}: {\n    arr: any,\n    idx: number,\n}) => {\n    const SentenseList = arr.map((item: any, i: number) => {\n        return <tr key={'tr' + i} className={`tr-day n-${i}`} >\n            {i === 0 && <td key={'tr' + i} rowSpan={arr.length}>DAY{idx + 1}</td>}\n            <td data-tableexport-xlsxformatid=\"1\">{i + 1}</td>\n            <td className=\"td-text-left\">{item.ko}</td>\n            <td className=\"td-text-left\">{item.en}</td>\n            <td className=\"td-memo\">&nbsp;</td>\n        </tr>\n    })\n    return (<>\n        {SentenseList}\n    </>);\n}\n\n\nexport default CoursePrint;","import React from 'react';\nimport PageRoute from './pages/PageRoute';\nimport './scss/Main.scss';\n\n// starterKit-staticWebStyle1\nfunction App() {\n  // prevena\n  let isRen: boolean = false;\n  if (process.env.NODE_ENV === 'development') {\n    const href = (window as any).location.href;\n    if (href.split(\"localhost\").length > 1) {\n      isRen = true;\n    }\n  }\n\n  // PORT=9922\n  // == prevena\n\n  return (\n    <div className=\"App\">\n      {isRen && <>\n        <PageRoute />\n      </>}\n    </div>\n  );\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { RecoilRoot } from \"recoil\";\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <RecoilRoot>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}