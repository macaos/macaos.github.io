{"version":3,"sources":["core/EventEmitter.ts","core/store.ts","components/PrintTable.tsx","fb/fbase.ts","env.ts","core/data.ts","pages/CourseMain.tsx","components/ZZAudioProgram.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Event","events","event","data","this","forEach","callback","push","ON_AUTH_STATE_CHANGED","FB_START_LOGIN","IS_APP_READY","INSERT_PAGE","REPLACE_PAGE","GOTO_BACK","RESET_PAGE","SHOW_ALERT","HIDE_ALERT","INIT_AUDIO","AUDIO_PLAY_PAUSE","AUDIO_STOP","SENTENSE_PLAYING","SENTENSE_PAUSE","CONTROL_UI_UPDATE","SET_BTN_PLAY_STATE","CHANGE_BTN_PLAY_STATE","SHOW_NOTI_MESSAGE","PURCHASE_COMPLETE","FREETIME_UPDATED","CLICK_HOTCLIP_THUMB","SHOW_LOADING","HIDE_LOADING","AUDIO_PLAY_COUNT","CHANGE_TPID","SHOW_TOAST_MESSAGE","atom","key","default","require","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","userInfo","initUserInfoMerge","userMoreInfo","email","uid","repeatMode","buyCourses","showClips","keepClips","keepSentense","doneSentense","historyClips","authService","onAuthStateChanged","user","console","log","docName","makeDocNameWithUserInfo","dbService","collection","doc","get","then","docs","extend","syncMoreInfo","EventEmitter","dispatch","catch","err","r","cid","isLogin","includes","set","merge","id","split","reg","test","replace","substr","emailPw","auth","sendPasswordResetEmail","alert","error","convertErrorMessage","convertMessage","code","message","firestore","mainJSON","storage","scrollingLazyTime","scrollingTick","topicJSON","isSentensePressing","pageShadowingParam","sentenseEn","sentenseKo","sentenseIdx","topicID","inParam","inQuery","window","location","href","resultItem","courseToMainJSON","gotoPage","query","find","item","i","courseID","idx","dir","length","overIdx","tpid","fbase","arr","filter","type1","type2","value","newArr","JSON","parse","stringify","text","substring","bytes","CryptoJS","AES","decrypt","toString","enc","Utf8","options","axios","clearInterval","setInterval","firstY","scrollY","setTimeout","audioTimeArr","livePlayInfo","totalIdx","src","param","Object","assign","json","sentense","timeen","playComplete","bind","st","et","repeat","repeatCnt","zzaudio","play","allplay","pause","delay","ms","Promise","resolve","currentSoundTime","intervalTime","settingInterval","interval","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.881939ac.chunk.js","sourcesContent":["\n\n/**\n * use\n * import EventEmitter, {Event} from \"common/events/EventEmitter\";\n *\n * dispatch\n * EventEmitter.dispatch(Event.EVENT_EXAMPLE, {같이 넘길 파라메터 });\n *\n * subscribe\n * EventEmitter.subscribe(Event.EVENT_EXAMPLE, (options:any)=>{\n *  {같이 넘길 파라메터 }\n * });\n */\nexport class Event {\n\n\tpublic static ON_AUTH_STATE_CHANGED: string = \"onAuthStateChanged\";\n\tpublic static FB_START_LOGIN: string = \"fbStartLogin\";\n\tpublic static IS_APP_READY: string = \"isAppReady\";\n\tpublic static INSERT_PAGE: string = \"insertPage\";\n\tpublic static REPLACE_PAGE: string = \"replacePage\";\n\tpublic static GOTO_BACK: string = \"gotoBack\";\n\tpublic static RESET_PAGE: string = \"resetPage\";\n\tpublic static SHOW_ALERT: string = \"showAlert\";\n\tpublic static HIDE_ALERT: string = \"hideAlert\";\n\tpublic static INIT_AUDIO: string = 'initAudio';\n\tpublic static AUDIO_PLAY_PAUSE: string = 'audioPlayPause';\n\tpublic static AUDIO_STOP: string = 'audioStop';\n\tpublic static SENTENSE_PLAYING: string = 'sentensePlaying';\n\tpublic static SENTENSE_PAUSE: string = 'sentensePause';\n\tpublic static CONTROL_UI_UPDATE: string = 'controlUIUpdate';\n\tpublic static SET_BTN_PLAY_STATE: string = 'setBtnPlayState';// 외부에서 버튼 상태를 변경할때 발생\n\tpublic static CHANGE_BTN_PLAY_STATE: string = \"changeBtnPlayState\";// 버튼 자신이 변경되면 외부에 알리느라 발생\n\tpublic static SHOW_NOTI_MESSAGE: string = \"showNotiMessage\";\n\tpublic static PURCHASE_COMPLETE: string = \"purchaseComplete\";\n\tpublic static FREETIME_UPDATED: string = \"freetimeUpdated\";\n\tpublic static CLICK_HOTCLIP_THUMB: string = \"clickHotclipThumb\";\n\tpublic static SHOW_LOADING: string = \"showLoading\";\n\tpublic static HIDE_LOADING: string = \"hideLoading\";\n\tpublic static AUDIO_PLAY_COUNT: string = \"audioPlayClunt\";\n\tpublic static CHANGE_TPID: string = \"changeTPID\";\n\tpublic static SHOW_TOAST_MESSAGE: string = \"showToastMessage\";\n\n\n\tpublic events: any = {};\n\tpublic dispatch(event: string, data?: any): void {\n\t\tif (!this.events[event]) return;\n\t\tthis.events[event].forEach((callback: (arg0: any) => void) =>\n\t\t\tcallback(data)\n\t\t);\n\t}\n\tpublic subscribe(event: string, callback: any): void {\n\t\tif (!this.events[event]) this.events[event] = [];\n\t\tthis.events[event].push(callback);\n\t}\n\tpublic remove(event: string): void {\n\t\tif (this.events[event]) this.events[event] = null;\n\t}\n}\n\nexport default new Event();\n","import { atom, RecoilState } from \"recoil\";\n\n// export const config = {\n//     appid: \"com.kareui.caseteenglish\",\n//     inappIDs: {\n//         \"unlock01\": \"com.kareui.caseteenglish.unlock01\"\n//     }\n// }\n\nexport const isLoadingState = atom({\n    key: \"isLoadingState\",\n    default: false,\n})\n\n// // playControl detailPanel state\nexport const isCloseDetailPanelState = atom({\n    key: \"isCloseDetailPanelState\",\n    default: true,\n})\n\nexport const scriptModeState = atom({\n    key: \"scriptModeState\",\n    default: 'ek',\n})\n\n// export const sentenseRepeatIdxState: RecoilState<number> = atom({\n//     key: \"sentenseRepeatIdxState\",\n//     default: 9999,\n// })\n\nexport const btnRepeatModeUpdateState: RecoilState<number> = atom({\n    key: \"btnRepeatModeUpdateState\",\n    default: 0,\n})\n\n// export const homeListSortState: RecoilState<string> = atom({\n//     key: \"homeListSortState\",\n//     default: 'reverse',\n// })\n// export const updateCntPlayState: RecoilState<number> = atom({\n//     key: \"updateCntPlayState\",\n//     default: 0,\n// })\n\n// export const wbIsOpenNavState = atom({\n//     key: \"wbIsOpenNavState\",\n//     default: false,\n// });\n\n// export const tpidState = atom({\n//     key: \"tpidState\",\n//     default: '',\n// })\n\n// export const cidState = atom({\n//     key: \"cidState\",\n//     default: '',\n// })\n\n// 강화훈련\nexport const isShowShadowingState = atom({\n    key: \"isShowShadowingState\",\n    default: false,\n})\n\nexport const printCourseIDState = atom({\n    key: \"printCourseIDState\",\n    default: '',\n})\n\n\n\n\nexport default {};","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { printCourseIDState } from '../core/store';\nconst printJSON = require('../resource/mainJSONPrint.json');\nconst PrintTable = () => {\n\n    const [printCourseID, setprintCourseID] = useRecoilState(printCourseIDState);\n    const selectCourseJSON = printJSON.find((item: any, i: number) => {\n        // console.log('printJSONitem.courseID === printCourseID', item, item.info.courseID,'__', printCourseID)\n        if (item.info.courseID === printCourseID) {\n            return item;\n        }\n\n    });\n    let tr = [];\n    if (selectCourseJSON) {\n        tr = selectCourseJSON.list.map((item: any, i: number) => {\n            return <DaySentenses arr={item} idx={i} key={i} />\n        })\n    }\n    // const tr = selectCourseJSON.list.map((item:any, i:number)=>{\n    //     return <div>{item.ko}, {item.en} </div>\n    // })\n    // console.log('printJSONitem1',selectCourseJSON)\n    return (\n        <div className=\"PrintTable\">\n            {\n                selectCourseJSON && <div>\n                    <div className=\"header\">\n                        <div className=\"row-right\">\n                            <button className=\"btn btn-border\" onClick={() => {\n                                setprintCourseID('');\n                            }}><i className=\"fas fa-arrow-left\"></i> 돌아가기</button>\n                            <button className=\"btn btn-border\" onClick={() => {\n                                // console.log((document as any).getElementById(\"script-print-table\"))\n                                // new TableExport((document as any).getElementById(\"script-print-table\"),{\n\n                                //     filename:'카셋회화훈련-인턴',\n                                //     formats:['xlsx'],\n                                // });\n                                (window as any).printScript('카셋회화훈련-인턴');\n                            }}><i className=\"fas fa-file-download\"></i> 엑셀로 다운로드</button>\n                        </div>\n\n                    </div>\n                    <table id=\"script-print-table\">\n                        <thead>\n                            <tr >\n                                <td >일자</td>\n                                <td >No.</td>\n                                <td >한글</td>\n                                <td >영어</td>\n                                <td >확인</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {tr}\n                            {/* <tr >\n                                <td rowSpan={3}>&nbsp;&nbsp;&nbsp;</td>\n                                <td >&nbsp;</td>\n                                <td >&nbsp;</td>\n                                <td >&nbsp;</td>\n                                <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr>\n                            <tr >\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            <td >&nbsp;</td>\n                            </tr> */}\n                        </tbody>\n                    </table>\n\n\n                </div>\n            }\n        </div>\n    );\n};\n\nconst DaySentenses = ({\n    arr,\n    idx,\n}: {\n    arr: any,\n    idx: number,\n}) => {\n    const SentenseList = arr.map((item: any, i: number) => {\n        return <tr key={'tr' + i} className=\"tr-day\" >\n            {i === 0 && <td key={'tr' + i} rowSpan={arr.length}>DAY{idx + 1}</td>}\n            <td data-tableexport-xlsxformatid=\"1\">{i + 1}</td>\n            <td className=\"td-text-left\">{item.ko}</td>\n            <td className=\"td-text-left\">{item.en}</td>\n            <td className=\"td-memo\">&nbsp;</td>\n        </tr>\n    })\n    return (<>\n        {SentenseList}\n    </>);\n}\n\nexport default PrintTable;","import extend from 'deep-extend';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport { firebaseConfig } from \"../env\";\nimport EventEmitter, { Event } from \"../core/EventEmitter\";\n\n\n\nfirebase.initializeApp(firebaseConfig);\n\nclass FBase {\n    userInfo: any = 'loading';// loading인 경우 아예 정보 받기 전임\n    initUserInfoMerge: boolean = false;\n    userMoreInfo: {\n        email: string,\n        uid: string,\n        repeatMode: 'ALL' | '1' | '' | 'nil',\n        buyCourses: string[],\n        showClips: string[],\n        keepClips: string[],\n        keepSentense: string[],\n        doneSentense: string[],\n        historyClips: string[],\n    } = {\n            email: '',\n            uid: '',\n            repeatMode: '1',\n            buyCourses: [],\n            showClips: [],\n            keepClips: [],\n            keepSentense: [],\n            doneSentense: [],\n            historyClips: [],\n        };\n    initLogin() {\n        authService.onAuthStateChanged((user) => {\n\n            console.log('authService', user);\n\n            this.userInfo = user;\n\n            // 사용자 셋팅정보 조회\n            // 정보가 null인 경우 기본 정보 생성\n            // 있는경우 정보 덮어씌우기\n            if (this.userInfo) {\n\n                const docName = this.makeDocNameWithUserInfo();\n                console.log('tmplog_authService1', docName);\n                dbService.collection('userstatus').doc(docName).get().then((docs: any) => {\n                    console.log('tmplog_authService3');\n                    // console.log('docs.data()', docs.data());\n                    const data = docs.data();\n                    console.log('docs.data()', docName, data);\n                    if (data) {\n                        // data.uid = this.userMoreInfo.uid;\n                        console.log('docs.data()1');\n                        this.userMoreInfo = extend(this.userMoreInfo, data);\n                    } else {\n                        console.log('docs.data()2');\n                        // 최초 진입(데이터 생성)\n                        this.userMoreInfo = this.userMoreInfo;\n                        this.syncMoreInfo();\n                    }\n                    console.log('docs.data()-1');\n\n                    this.userMoreInfo.email = this.userInfo.email;\n                    this.userMoreInfo.uid = this.userInfo.uid;\n                    this.initUserInfoMerge = true;\n                    EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n                }).catch(function (err) {\n                    // console.log('tmplog_authService4err', err);\n                    EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, null);\n                    // if (err.code == 'failed-precondition') {\n                    //     // Multiple tabs open, persistence can only be enabled\n                    //     // in one tab at a a time.\n                    //     // ...\n                    // } else if (err.code == 'unimplemented') {\n                    //     // The current browser does not support all of the\n                    //     // features required to enable persistence\n                    //     // ...\n                    // }\n                });\n                // dbService.collection('userstatus').get().then((docs: any) => {\n                //     let searchUserDocCnt = 0;// 사용자에 대한 문서가 여러개인경우 오류\n                //     docs.docs.forEach((doc: any) => {\n\n                //         const data = doc.data();\n                //         console.log('userMoreInfoa0---', data, data.uid, '-', this.userInfo.uid)\n                //         if (data.uid === this.userInfo.uid) {\n                //             searchUserDocCnt++;\n                //             console.log('userMoreInfoab', this.userMoreInfo, data);\n                //             // 현재 데이터 존재하는경우\n                //             this.userMoreInfo = extend(this.userMoreInfo, data);\n                //         } else {\n                //\n                //         }\n                //         EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n\n                //     })\n                //     // console.log('userMoreInfoac', searchUserDocCnt);\n                //     // // 최초 진입\n                //     // if (searchUserDocCnt === 0) {\n                //     //     // 최초 진입(데이터 생성)\n                //     //     this.userMoreInfo = extend(this.userMoreInfo, {\n                //     //         uid: this.userInfo.uid\n                //     //     });\n                //     //     // 저장\n                //     //     // dbService.collection('userstatus').add(this.userMoreInfo).then((res: any) => {\n                //     //     //     console.log('tmplog_dbsync', res)\n                //     //     // });\n                //     //     this.syncMoreInfo();\n                //     // }\n                //     // // 데이터 중복\n                //     // if (searchUserDocCnt > 1) {\n                //     //     alert('에러' + searchUserDocCnt)\n                //     // }\n                //     // console.log('userMoreInfoarr', this.userMoreInfo)\n                //     // EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n                // });\n            } else {\n                console.log('tmplog_authService2');\n                console.log('userMoreInfoarr2', this.userMoreInfo)\n                EventEmitter.dispatch(Event.ON_AUTH_STATE_CHANGED, user);\n            }\n\n\n\n        });\n    }\n\n    isLogin() {\n        let r = true;\n        if (this.userInfo === null || this.userInfo === 'loading') {\n            r = false;\n        }\n        return r;\n    }\n    isAvailableBook(cid: string): 'available' | 'needLogin' | 'needPurchase' {\n        // 로그인이 안 된 경우\n        if (!this.isLogin()) {\n            return 'needLogin';\n        }\n        console.log('tmplog_this.userInfo', this.userMoreInfo)\n        // 구매 목록에 없는 경우\n        if (!this.userMoreInfo.buyCourses.includes(cid)) {\n            return 'needPurchase';\n        }\n        return 'available';\n    }\n    syncMoreInfo() {\n        console.log('docs.data()-sync');\n        // 유저 로그인 전이면\n        if (!this.userInfo || this.userInfo === '' || this.userInfo === 'loading') {\n            // alert(this.userInfo);\n            return;\n        }\n        // 유저 데이터를 불러오기 전이면\n        if (!this.initUserInfoMerge) return;\n\n        dbService.collection(\"userstatus\").doc(this.makeDocNameWithUserInfo()).set(this.userMoreInfo, { merge: true }).then(function () {\n            console.log(\"Document successfully written!\");\n        });\n    }\n    makeDocNameWithUserInfo() {\n        let id = this.userInfo.email.split('@')[0];\n        const reg = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n        if (reg.test(id)) {\n            id = id.replace(reg, '');\n        }\n        id += 'mXCeNH6A5fjdrDfaOjDe';// 여유있게 자르기위해 랜덤 문자 추가\n        id = id.substr(0, 10);// 10자리로 자름\n        // console.log('this.userInfo.email', this.userInfo.email);\n        return id + this.userInfo.uid;\n    }\n    callLogin(emailPw: {\n        email: string,\n        pw: string,\n    }, callback: (userInfo: any) => void) {\n\n    }\n    sendPasswordResetEmail(email: string) {\n        var auth = firebase.auth();\n        auth.sendPasswordResetEmail(email).then(function () {\n            alert(email + '로 발송된 이메일을 확인 해 주세요.')\n        }).catch((error) => {\n            console.log(error);\n            alert(this.convertErrorMessage(error));\n        });\n    }\n    convertErrorMessage(error: any) {\n        const errorMessage: any = {\n            'auth/invalid-email': '올바른 이메일을 입력하세요.',\n            'auth/invalidNewPw': '입력한 비밀번호가 일치하지 않습니다.',\n            'auth/weak-password': '6자리 이상의 비밀번호를 입력하세요',\n            'auth/wrong-password': '비밀번호가 올바르지 않습니다.',\n            'auth/user-not-found': '해당 가입정보가 없습니다. 정보를 확인 또는 회원가입을 해주세요.',\n            'auth/email-already-in-use': '이미 가입된 이메일입니다.',\n        }\n        const convertMessage = errorMessage[error.code]\n        if (convertMessage) {\n            return convertMessage;\n        }\n        console.log(error);\n        return error.message;\n    }\n}\n\nexport default new FBase();\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","export const firebaseConfig = {\n    apiKey: \"AIzaSyBq__j-SvDbukmkLD5CaFo9rKa4706HHJk\",\n    authDomain: \"casetebook.firebaseapp.com\",\n    databaseURL: \"https://casetebook.firebaseio.com\",\n    projectId: \"casetebook\",\n    storageBucket: \"casetebook.appspot.com\",\n    messagingSenderId: \"863352106334\",\n    appId: \"1:863352106334:web:1a3de357b2edff427ef3cf\",\n    measurementId: \"G-0BQB2PPQBE\"\n};\n","import axios from 'axios';\nimport CryptoJS from 'crypto-js';\nimport EventEmitter, { Event } from '../core/EventEmitter';\nimport fbase from '../fb/fbase';\n\nconst mainJSON = require('../resource/mainJSON.json');\nconst key = \"XDVl1SGxRn\";\nlet scrollingLazyTime: number = 0;\nlet scrollingTick: any = null;\nclass Data {\n    mainJSON: any = mainJSON;\n    topicJSON: any;\n    isSentensePressing: boolean = false;\n    public pageShadowingParam: {\n        sentenseEn: string,\n        sentenseKo: string,\n        sentenseIdx: number,\n        topicID: string,\n    } = {\n            sentenseEn: '',\n            sentenseKo: '',\n            sentenseIdx: -1,\n            topicID: '',\n        }\n\n\n    getRootPath() {\n        return '/';\n    }\n\n    // setParameter => gotoPage\n    gotoPage(inParam: string, inQuery: string) {\n        if (!inQuery || inQuery === '') {\n            window.location.href = '/';\n            return;\n        }\n        // alert('TODO:gotoPage');\n        window.location.href = `/${inParam}?d=${inQuery}`;\n    }\n    // 코스 메인으로 가기\n    gotoCourseMainPage(cid: string) {\n        const resultItem = this.courseToMainJSON(cid);\n        this.gotoPage('CourseMain', resultItem.query);\n    }\n    // mainJson에서 해당 코스 목록 조회\n    courseToMainJSON(cid: string) {\n        return mainJSON.find((item: any, i: number) => {\n            return item.courseID === cid;\n        });\n    }\n    // 이전/다음 가기\n    gotoNextPrev(idx: number, cid: string, dir: 'next' | 'prev') {\n        const resultItem = mainJSON.find((item: any, i: number) => {\n            return item.courseID === cid;\n        })\n        if (idx === 0 && dir === 'prev') {\n            alert('이전 목록이 없습니다.(첫 번째 토픽)');\n            return;\n        }\n        if (idx === resultItem.item.length && dir === 'next') {\n            alert('마지막 목록 입니다.');\n            return;\n        }\n        const overIdx = dir === 'next' ? 1 : -1;\n        this.gotoPage('CoursePlay', resultItem.item[idx + overIdx].query);\n    }\n    setClipHistory(tpid: string) {\n\n        if (!fbase.userMoreInfo.historyClips) {\n            fbase.userMoreInfo.historyClips = [];\n        }\n\n        const arr = fbase.userMoreInfo.historyClips.filter((item: string) => {\n            // 동일 히스토리 존재하면 제거 \n            return item !== tpid;\n        })\n\n        arr.push(tpid);\n\n        fbase.userMoreInfo.historyClips = arr;\n        // debugger;\n        // appBridge.syncStorageData();\n        fbase.syncMoreInfo();\n    }\n    setSettingKeepClipSentense(\n        type1: 'clip' | 'sentense' | 'done',\n        type2: 'add' | 'remove',\n        value: any) {\n        console.log('setSettingKeepClipSentense', type1, type2, value);\n        let arr: string[] = [];\n        let newArr: string[] = [];\n        if (type1 === 'clip') {\n\n            arr = fbase.userMoreInfo.keepClips;\n        } else if (type1 === 'sentense') {\n            arr = fbase.userMoreInfo.keepSentense;\n        } else if (type1 === 'done') {\n            arr = fbase.userMoreInfo.doneSentense;\n        }\n        if (arr.includes(value)) {\n            // 포함되어있을때 삭제 케이스 \n            if (type2 === 'remove') {\n                // 삭제 \n                newArr = arr.filter((item, i) => {\n                    return item !== value;\n                });\n            }\n\n        } else {\n            // 불포함인데 포함 케이스 \n            if (type2 === 'add') {\n                // 포함 \n                arr.push(value)\n                newArr = JSON.parse(JSON.stringify(arr));\n            }\n\n        }\n\n        if (type1 === 'clip') {\n            fbase.userMoreInfo.keepClips = newArr;\n\n        } else if (type1 === 'sentense') {\n            fbase.userMoreInfo.keepSentense = newArr;\n\n        } else if (type1 === 'done') {\n            fbase.userMoreInfo.doneSentense = newArr;\n\n        }\n\n        fbase.syncMoreInfo();\n    }\n    decryptURL(text: string) {\n        try {\n            text = text.substring(7);\n            const bytes = CryptoJS.AES.decrypt(text, key);\n            return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n        } catch (err) {\n            console.error(err);\n            return;\n        }\n    }\n    showToastMessage(options: {\n        message: string,\n        mtime: number\n    }) {\n        EventEmitter.dispatch(Event.SHOW_TOAST_MESSAGE, options)\n    }\n    async getTopicJSON(cid: string, tpid: string) {\n        // this.topicJSON = await axios.get(`/resource/courses/${cid}/topics/${tpid}/mm.json`, {}).;\n        return await axios.get(`/resource/courses/${cid}/topics/${tpid}/mm.json`, {});\n    }\n    // sentense클릭동안 스크롤락 실행\n    sentensePressing() {\n        this.isSentensePressing = true;\n        scrollingLazyTime = 2000;// 2초\n        if (scrollingTick) {\n            clearInterval(scrollingTick);\n        }\n        scrollingTick = setInterval(() => {\n            scrollingLazyTime = scrollingLazyTime - 500;\n            if (scrollingLazyTime <= 0) {\n                this.isSentensePressing = false;\n                scrollingLazyTime = 0;\n                clearInterval(scrollingTick);\n            }\n        }, 500);\n    }\n    // 현재 화면이 스크롤링 중인가?\n    isScrolling(callback: (result: boolean) => void) {\n        const firstY = window.scrollY;\n        setTimeout(() => {\n            if (firstY === window.scrollY) {\n                callback(false);\n            } else {\n                callback(true);\n            }\n        }, 100);\n    }\n}\n\nexport default new Data();","import classnames from 'classnames';\nimport { css } from 'emotion';\nimport qs from 'qs';\nimport React from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport WCourse from '../components/WCourse';\nimport data from '../core/data';\nimport { printCourseIDState } from '../core/store';\nimport { Tags } from './PageHome';\n\nconst selfName = \"CourseMain\";\nconst CourseMain = ({\n    location\n}: {\n    location: any\n}) => {\n    // const query: any = qs.parse(location.search, {\n    //     ignoreQueryPrefix: true // /about?details=true 같은 쿼리 주소의 '?'를 생략해주는 옵션입니다.\n    // });\n    const d = location.search.substring(3);\n    const decryptQuery = data.decryptURL(d);\n    const cid = (decryptQuery && decryptQuery.cid) ? decryptQuery.cid : '';\n    console.log('tempcid', decryptQuery, cid)\n    return (\n        <div>\n            {\n                cid\n                    ?\n                    <CourseMainList cid={cid} />\n                    :\n                    <div>\n                        없는 경로 입니다.<br></br>\n                        <button onClick={() => {\n                            data.gotoPage('/', '')\n                        }}>메인페이지로 돌아가기</button>\n                    </div>\n            }\n        </div>\n    );\n};\n\nconst CourseMainList = ({\n    cid\n}: {\n    cid: string\n}) => {\n    const setprintCourseID = useSetRecoilState(printCourseIDState);\n    const mainJSONFilter = data.mainJSON.filter((item: any, i: number) => {\n        return item.courseID === cid;\n    })\n    const courseItemListJSON = mainJSONFilter[0];\n    const isOwner = true;// TODO : firebase // fbase.userMoreInfo.buyCourses.includes(courseItemListJSON.courseID);\n\n    return (\n        <div className=\"CourseMainList\">\n            <div className={css`height:20px;`}></div>\n            <div className=\"contents\">\n                <div className=\"course-item\">\n                    <div className={classnames([\"cover-img\", css`\n                        background-image: url(\"${data.getRootPath()}resource/courses/${courseItemListJSON.courseID}/cover.jpg\");\n                    `])}>\n                    </div>\n                    <div className=\"info\">\n                        <h3>{courseItemListJSON.title}</h3>\n                        <div className=\"info-sub\">\n                            <div>{courseItemListJSON.item.length}개 코스</div>\n                            <div className=\"tags\">\n                                <Tags str={courseItemListJSON.tags} key={courseItemListJSON.courseID} />\n                            </div>\n                            {\n                                isOwner\n                                    ?\n                                    <div>구매완료</div>\n                                    :\n                                    <button className=\"btn btn-border\">구매 1,300원</button>\n                            }\n                        </div>\n\n\n                    </div>\n                </div>\n                <div className=\"list-header\">\n                    <div className=\"list-info\">53개 코스</div>\n                    <div className=\"funcs\">\n                        <button className=\"btn\" onClick={() => {\n                            // alert(courseItemListJSON.courseID)\n                            setprintCourseID(courseItemListJSON.courseID);\n                        }}><i className=\"fas fa-table\"></i> 엑셀 & 프린트</button>\n                    </div>\n\n                </div>\n                {cid && <WCourse json={courseItemListJSON} parentName={selfName} />}\n            </div>\n        </div>\n    );\n}\n\nexport default CourseMain;","import EventEmitter, { Event } from \"../core/EventEmitter\";\n\nexport type TLivePlayInfo = {\n    idx?: number | null,// null이면 실행 안하는 중\n    totalIdx?:number,\n    src?: string,\n    json?: any,\n    st?: number,\n    et?: number,\n    callback?: ()=>void,\n    repeat?:number,\n    interval?: number,\n    speed?: number,\n    repeatCnt?: number,\n    allplay?: boolean,// 전체듣기\n    // allplayModoshi?: boolean,// 전체반복\n}\nlet audioTimeArr:number[];\nclass ZZAudioProgram {\n    get zzaudio() {\n        return (window as any).zzaudio;\n    }\n    livePlayInfo:TLivePlayInfo = {\n        idx: null,\n        totalIdx: 0,\n        src: '',\n    };\n    presetSrc(src:string){\n        this.livePlayInfo.src = src;\n        // this.zzaudio.presetSrc(src);\n    }\n    play(param:TLivePlayInfo){\n        const that = this;\n        this.livePlayInfo = Object.assign(this.livePlayInfo,param)\n\n        console.log('livePlayInfojson',this.livePlayInfo.json)\n        const idx = this.livePlayInfo.idx = this.livePlayInfo.idx || 0;\n        audioTimeArr = this.livePlayInfo.json.sentense[idx].timeen.split('|');\n        // this.livePlayInfo.repeatCnt = param.repeat;\n        this.livePlayInfo.callback = this.playComplete.bind(that);\n        this.livePlayInfo.st = audioTimeArr[0];\n        this.livePlayInfo.et = audioTimeArr[1];\n        if( param.repeat !== 9999 ){\n            if(this.livePlayInfo.repeatCnt)this.livePlayInfo.repeatCnt --;\n        }\n        EventEmitter.dispatch(Event.CONTROL_UI_UPDATE,idx)\n        // EventEmitter.dispatch(Event.SENTENSE_PLAYING,idx)\n        this.zzaudio.play(this.livePlayInfo);\n    }\n    pause(){\n        this.livePlayInfo.idx = null;\n        this.livePlayInfo.allplay = false;\n        this.livePlayInfo.repeat = 0;\n        this.livePlayInfo.repeatCnt = 0;\n        // EventEmitter.dispatch(Event.SENTENSE_PAUSE,this.livePlayInfo.idx)\n        EventEmitter.dispatch(Event.CONTROL_UI_UPDATE,this.livePlayInfo.idx)\n        this.zzaudio.pause();\n    }\n\n    async playComplete(){\n        // debugger;\n        // console.log('repeatCnt',livePlayInfo.repeatCnt)\n        //\n\n        const currentSoundTime = (audioTimeArr[1] - audioTimeArr[0]);\n        const intervalTime = (() => {\n            const settingInterval:any = this.livePlayInfo.interval;\n            if (settingInterval === 9999) {\n                return currentSoundTime;// 문장길이 +1초\n            } else {\n                return settingInterval * 1000;// 설정타임\n            }\n        })();\n        if(this.livePlayInfo.allplay || this.livePlayInfo.repeat === 9999){\n            await delay(intervalTime);\n        }\n\n\n        EventEmitter.dispatch(Event.CONTROL_UI_UPDATE,this.livePlayInfo.idx)\n        console.log('allplay',this.livePlayInfo);\n        this.livePlayInfo.repeatCnt = this.livePlayInfo.repeatCnt || 0;\n        if(this.livePlayInfo.repeatCnt > 0){\n            // this.livePlayInfo.repeat = this.livePlayInfo.repeatCnt;\n            console.log('play-trigger1',this.livePlayInfo);\n            this.play(this.livePlayInfo);\n            return;\n        }\n        if(this.livePlayInfo.allplay){\n            // debugger;\n            // 다음인덱스\n            const idx = this.livePlayInfo.idx || 0;\n\n            if(this.livePlayInfo.totalIdx){\n                this.livePlayInfo.idx = idx +1;\n                // 끝에 도달\n                if(this.livePlayInfo.idx >= this.livePlayInfo.totalIdx){\n                    this.livePlayInfo.idx = 0;\n                }\n            }\n\n            // 반복 cnt복원\n            this.livePlayInfo.repeatCnt = this.livePlayInfo.repeat;\n            console.log('play-trigger2',this.livePlayInfo);\n            this.play(this.livePlayInfo);\n            return;\n        }\n        function delay(ms:number):Promise<void> {\n            return new Promise<void>(resolve => {\n              setTimeout(() => {\n                console.log(`${ms} 밀리초가 지났습니다.`);\n                resolve()\n              }, ms);\n            });\n          }\n        // if(repeatCnt > 0){\n        //     this.play();\n        //     param.repeatCnt\n        // }\n    }\n\n}\n\n\nexport default new ZZAudioProgram();","import React from 'react';\nimport PageRoute from './pages/PageRoute';\nimport './scss/Main.scss';\n\n// starterKit-staticWebStyle1\nfunction App() {\n  // prevena\n  let isRen: boolean = false;\n  if (process.env.NODE_ENV === 'development') {\n    const href = (window as any).location.href;\n    if (href.split(\"localhost\").length > 1) {\n      isRen = true;\n    }\n  }\n\n  // PORT=9922\n  // == prevena\n\n  return (\n    <div className=\"App\">\n      {isRen && <>\n        <PageRoute />\n      </>}\n    </div>\n  );\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { RecoilRoot } from \"recoil\";\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <RecoilRoot>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}